1.) Using Visual Studio, create the sample ASP.NET MVC Web application that uses C#.  Leave "No Authentication" selected and "Add unit tests" unchecked.

2.) Start the application without debugging from Visual Studio.

3.) Click on the "About" link in the navigation bar.  What code in the application just got executed?  Hint: Look at the address bar in the browser.
	the about action in the home controller
	Click on the "Application name" in the navigation bar to return to the home page.
	
5.) In the address bar of the browser, add /home/about to the end of the URL (after the port number) and hit enter.  
	Explain the process the MVC framework takes to result in the page displayed.  
	How does the MVC framework know what to display based upon the URL it receives?
	It will first search for a controller called home. In that controller it will then search for an action named about.
	Inside that function a viewbag message is set to a given string and returns a view.
	It then looks for the view folder and searchs for a view named about, then it executes that view drawing the page to the screen.
Exercise 2

6.) What part of the Home controller generates the "About" page?
	the about action which returns a view, this gets the view named about and draws the page based on that.
7.) What data is being generated by the controller to be displayed in the page?
	the viewbag message
8.) Where is the view that the controller invokes to display the page?
	Inside the view folder there is a folder named home which contains all the views for actions in the home controller
9.) Describe the folder hierarchy convention that allows the MVC framework to find the correct view.
	in the base project there will be folders named models, views and controlers
	Inside each of these if there is a subfolder such as home there will be a subfolder in each other others.
	Views will be named the same as the actions in controler.

10.) Find the place in the view where the data generated by the controller is displayed.  
	This is a simple example of the Razor syntax for adding C# logic to a view.

11.) Change the data generated by the controller, rebuild and restart the application.  Redisplay the "About" page to see the new data displayed.

12.) Add another piece of data to be displayed in the "About" page.  Redisplay the "About" page to see the new data.

Exercise 3

14.) Create a new empty controller for the "Person" entity in your application with an "Index" method for displaying information for a person.
	Right click on the "Controllers" folder, select "Add" and then "Controller".

15.) Start the application in Visual Studio.

16.) Go to the address bar and enter Person after the port number in the URL.  Hit enter.  What do you see?  Why?
	server error 
	The view 'Index' or its master was not found or no view engine supports the searched locations. The following locations were searched:
	~/Views/Person/Index.aspx
	~/Views/Person/Index.ascx
	~/Views/Shared/Index.aspx
	~/Views/Shared/Index.ascx
	~/Views/Person/Index.cshtml
	~/Views/Person/Index.vbhtml
	~/Views/Shared/Index.cshtml
	~/Views/Shared/Index.vbhtml
	This happened because there is no view folder named Person with a view named Index for the website to access and render

17.)Create a view for displaying a person.  Right click on the "Person" controller under "Views",
	select "Add" and then "View".  Keep all of the default settings in the displayed dialog.

18.) Repeat steps 2 and 3.  What do you see now?
	The navagation bar and the Index header
19.) Add "person" data to the ViewBag in your new controller.

20.) Add the display of the new "person" data to the view that you created.

	Repeat steps 2 and 3.  What do you see now?

Exercise 4

21.) Add a "Person" model to your project.  Right click on "Models", select "Add" and then "Class".

22.) Add data to the "Person" model that you think is relevant to your application.


Put the code you created for this lab up on a GitHub repository.  Don't forget to include a text file in the repo that contains the answers to the question above.
Send me an email indicating that you finished the lab and include the URL to your GitHub repository for this lab.